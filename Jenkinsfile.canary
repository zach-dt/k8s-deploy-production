@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'CONTEXTLESS', key: 'app', value: 'front-end'],
      [context: 'CONTEXTLESS', key: 'environment', value: 'production']
    ]
  ]
]

pipeline {
  parameters {
    string(name: 'VERSION1', description: 'Percentage of traffic to be routed to version 1', trim: true)
    string(name: 'VERSION2', description: 'Percentage of traffic to be routed to version 2', trim: true)
    string(name: 'VERSION3', description: 'Percentage of traffic to be routed to version 3', trim: true)
    string(name: 'REMEDIATIONURL', description: 'Remediation script to call if canary release fails', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Update yml files') {
      when {
        beforeAgent true
        expression {
          return (env.VERSION1 != "" && env.VERSION2 != "")
        }
      }
      steps {
        container('kubectl') {
          sh "sed -i \"s~weight: .* #v1~weight: ${env.VERSION1} #v1~\" istio/virtual_service_canary.yml"
          sh "sed -i \"s~weight: .* #v2~weight: ${env.VERSION2} #v2~\" istio/virtual_service_canary.yml"
          sh "sed -i \"s~weight: .* #v3~weight: ${env.VERSION3} #v3~\" istio/virtual_service_canary.yml"
        }
      }
    }
    stage('Deploy updated yml') {
      when {
        beforeAgent true
        expression {
          return (env.VERSION1 != "" && env.VERSION2 != "")
        }
      }
      steps {
        container('kubectl') {
          sh "cat istio/virtual_service_canary.yml"
          sh "kubectl apply -f istio/virtual_service_canary.yml -n default"
          sh "kubectl describe virtualservices sockshop -n default"
        }
      }
    }
    stage('Update configuration change') {
      steps {
        container("curl") {
          script {
            def status = pushDynatraceConfigurationEvent (
              tagRule : tagMatchRules,
              description : "Load balancing changed to: v1 ${env.VERSION1} % ; v2 ${env.VERSION2} % ; v3 ${env.VERSION3} ;",
              source : "Jenkins",
              configuration : "Load Balancer",
              customProperties : [
                [key: 'remediationAction', value: "${env.REMEDIATIONURL}"]
              ]
            )
          }
        }
      }
    }
  }
}
